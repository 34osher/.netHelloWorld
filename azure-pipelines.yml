trigger:
- main

pool:
  name: docker_agent

variables:
  BuildConfiguration: Release
  NuGetPackageOutput: '$(Agent.WorkFolder)/1/a'
  SourceCoode: '$(Agent.WorkFolder)/1/s/.netHelloWorld.csproj'
  major: 1
  minor: 1
  name: $(major).$(minor)$(Rev:.r)

steps: 
- checkout: self
  persistCredentials: true
  clean: true
  
- script: |
    #!/bin/bash

    # Path to the .csproj file
    CSPROJ_FILE="$(SourceCoode)"

    # Extract the current version
    VERSION=$(grep -Po '(?<=<Version>)[^<]+' $CSPROJ_FILE)
    echo "Current version: $VERSION"

    # Increment the patch version
    IFS='.' read -ra ADDR <<< "$VERSION"
    PATCH=${ADDR[2]}
    PATCH=$((PATCH + 1))
    NEW_VERSION="${ADDR[0]}.${ADDR[1]}.$PATCH"
    echo "New version: $NEW_VERSION"

    # Update the .csproj file
    sed -i "s/<Version>$VERSION<\/Version>/<Version>$NEW_VERSION<\/Version>/" $CSPROJ_FILE

    #git config --local http.extraheader "AUTHORIZATION: bearer $(AutoriKey)"
    git config --global user.email "34osher@gmail.com"
    git config --global user.name "34osher"
  displayName: 'Increment Patch Version'

#- task: DotNetCoreCLI@2
#  displayName: 'Build .NET Core App'
#  inputs:
#    command: 'build'
#    projects: '**/*.csproj'
#    arguments: '--configuration $(BuildConfiguration) --output $(NuGetPackageOutput)'
- script: dotnet build $(SourceCoode) --configuration $(BuildConfiguration) --output $(NuGetPackageOutput)
  displayName: 'Build .NET Core App'

# - task: DotNetCoreCLI@2
#   displayName: 'Run .NET Core App'
#   inputs:
#     command: 'run'
#     projects: '**/*.csproj'
- script: |
    dotnet run --project $(SourceCoode)
  displayName: 'Run .NET Core App'

# - task: NuGetCommand@2
#   displayName: 'Pack to NuGet'
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/*.csproj'
#     versioningScheme: 'off'
#     buildProperties: 'OutputPath=$(Build.ArtifactStagingDirectory)'
#     outputDirectory: '$(NuGetPackageOutput)'
- script: |
    dotnet pack $(SourceCoode) --configuration $(BuildConfiguration) --output $(NuGetPackageOutput)
  displayName: 'Pack to NuGet'

- task: PublishBuildArtifacts@1
  displayName: Publish artifacts
  inputs:
    ArtifactName: BuildVersioning
    pathToPublish: $(BUILD_ARTIFACT_PATH)

# - task: NuGetCommand@2
#   displayName: 'Push to NuGet Feed'
#   inputs:
#     command: 'push'
#     packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'DotnetUbuntu'
- script: |
    dotnet nuget push --skip-duplicate $(NuGetPackageOutput)/**/*.nupkg --source "DotnetUbuntu" --api-key az
  displayName: 'Push to NuGet Feed'
